/*
Recommendation API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// NFTAPIService NFTAPI service
type NFTAPIService service

type ApiFetchRelevantMintsRequest struct {
	ctx context.Context
	ApiService *NFTAPIService
	apiKey *string
	address *string
	contractAddress *string
	tokenId *string
}

// API key required for authentication.
func (r ApiFetchRelevantMintsRequest) ApiKey(apiKey string) ApiFetchRelevantMintsRequest {
	r.apiKey = &apiKey
	return r
}

func (r ApiFetchRelevantMintsRequest) Address(address string) ApiFetchRelevantMintsRequest {
	r.address = &address
	return r
}

func (r ApiFetchRelevantMintsRequest) ContractAddress(contractAddress string) ApiFetchRelevantMintsRequest {
	r.contractAddress = &contractAddress
	return r
}

func (r ApiFetchRelevantMintsRequest) TokenId(tokenId string) ApiFetchRelevantMintsRequest {
	r.tokenId = &tokenId
	return r
}

func (r ApiFetchRelevantMintsRequest) Execute() (*RelevantMints, *http.Response, error) {
	return r.ApiService.FetchRelevantMintsExecute(r)
}

/*
FetchRelevantMints Relevant Mints for a User

Fetches all mint actions relevant for a contract address (and optionally tokenId for ERC1155s) given a user's ethereum address

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFetchRelevantMintsRequest
*/
func (a *NFTAPIService) FetchRelevantMints(ctx context.Context) ApiFetchRelevantMintsRequest {
	return ApiFetchRelevantMintsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RelevantMints
func (a *NFTAPIService) FetchRelevantMintsExecute(r ApiFetchRelevantMintsRequest) (*RelevantMints, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RelevantMints
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NFTAPIService.FetchRelevantMints")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/nft/relevant_mints"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.apiKey == nil {
		return localVarReturnValue, nil, reportError("apiKey is required and must be specified")
	}
	if r.address == nil {
		return localVarReturnValue, nil, reportError("address is required and must be specified")
	}
	if r.contractAddress == nil {
		return localVarReturnValue, nil, reportError("contractAddress is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "address", r.address, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "contract_address", r.contractAddress, "")
	if r.tokenId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "token_id", r.tokenId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "api_key", r.apiKey, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorRes
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
