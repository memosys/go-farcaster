/*
Farcaster API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// FollowsAPIService FollowsAPI service
type FollowsAPIService service

type ApiRelevantFollowersRequest struct {
	ctx context.Context
	ApiService *FollowsAPIService
	apiKey *string
	targetFid *int32
	viewerFid *int32
}

// API key required for authentication.
func (r ApiRelevantFollowersRequest) ApiKey(apiKey string) ApiRelevantFollowersRequest {
	r.apiKey = &apiKey
	return r
}

// User who&#39;s profile you are looking at
func (r ApiRelevantFollowersRequest) TargetFid(targetFid int32) ApiRelevantFollowersRequest {
	r.targetFid = &targetFid
	return r
}

// Viewer who&#39;s looking at the profile
func (r ApiRelevantFollowersRequest) ViewerFid(viewerFid int32) ApiRelevantFollowersRequest {
	r.viewerFid = &viewerFid
	return r
}

func (r ApiRelevantFollowersRequest) Execute() (*RelevantFollowersResponse, *http.Response, error) {
	return r.ApiService.RelevantFollowersExecute(r)
}

/*
RelevantFollowers Retrieve relevant followers for a given user

Returns a list of relevant followers for a specific FID.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiRelevantFollowersRequest
*/
func (a *FollowsAPIService) RelevantFollowers(ctx context.Context) ApiRelevantFollowersRequest {
	return ApiRelevantFollowersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RelevantFollowersResponse
func (a *FollowsAPIService) RelevantFollowersExecute(r ApiRelevantFollowersRequest) (*RelevantFollowersResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RelevantFollowersResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FollowsAPIService.RelevantFollowers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/farcaster/followers/relevant"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.apiKey == nil {
		return localVarReturnValue, nil, reportError("apiKey is required and must be specified")
	}
	if r.targetFid == nil {
		return localVarReturnValue, nil, reportError("targetFid is required and must be specified")
	}
	if r.viewerFid == nil {
		return localVarReturnValue, nil, reportError("viewerFid is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "target_fid", r.targetFid, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "viewer_fid", r.viewerFid, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "api_key", r.apiKey, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorRes
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
