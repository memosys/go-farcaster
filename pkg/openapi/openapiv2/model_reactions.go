/*
Farcaster API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapiv2

import (
	"encoding/json"
	"fmt"
)

// checks if the Reactions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Reactions{}

// Reactions struct for Reactions
type Reactions struct {
	Object string `json:"object"`
	Cast ReactionsCast `json:"cast"`
	User User `json:"user"`
}

type _Reactions Reactions

// NewReactions instantiates a new Reactions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReactions(object string, cast ReactionsCast, user User) *Reactions {
	this := Reactions{}
	this.Object = object
	this.Cast = cast
	this.User = user
	return &this
}

// NewReactionsWithDefaults instantiates a new Reactions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReactionsWithDefaults() *Reactions {
	this := Reactions{}
	return &this
}

// GetObject returns the Object field value
func (o *Reactions) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *Reactions) GetObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *Reactions) SetObject(v string) {
	o.Object = v
}

// GetCast returns the Cast field value
func (o *Reactions) GetCast() ReactionsCast {
	if o == nil {
		var ret ReactionsCast
		return ret
	}

	return o.Cast
}

// GetCastOk returns a tuple with the Cast field value
// and a boolean to check if the value has been set.
func (o *Reactions) GetCastOk() (*ReactionsCast, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cast, true
}

// SetCast sets field value
func (o *Reactions) SetCast(v ReactionsCast) {
	o.Cast = v
}

// GetUser returns the User field value
func (o *Reactions) GetUser() User {
	if o == nil {
		var ret User
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *Reactions) GetUserOk() (*User, bool) {
	if o == nil {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *Reactions) SetUser(v User) {
	o.User = v
}

func (o Reactions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Reactions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["object"] = o.Object
	toSerialize["cast"] = o.Cast
	toSerialize["user"] = o.User
	return toSerialize, nil
}

func (o *Reactions) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"object",
		"cast",
		"user",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varReactions := _Reactions{}

	err = json.Unmarshal(bytes, &varReactions)

	if err != nil {
		return err
	}

	*o = Reactions(varReactions)

	return err
}

type NullableReactions struct {
	value *Reactions
	isSet bool
}

func (v NullableReactions) Get() *Reactions {
	return v.value
}

func (v *NullableReactions) Set(val *Reactions) {
	v.value = val
	v.isSet = true
}

func (v NullableReactions) IsSet() bool {
	return v.isSet
}

func (v *NullableReactions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReactions(val *Reactions) *NullableReactions {
	return &NullableReactions{value: val, isSet: true}
}

func (v NullableReactions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReactions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


