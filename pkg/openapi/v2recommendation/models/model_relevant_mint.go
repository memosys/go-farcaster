/*
Recommendation API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapiv2recommendation

import (
	"encoding/json"
	"fmt"
)

// checks if the RelevantMint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RelevantMint{}

// RelevantMint A mint object relevant to the user
type RelevantMint struct {
	// Ethereum address
	ContractAddress string `json:"contract_address"`
	TokenId string `json:"token_id"`
	BlockNumber int32 `json:"block_number"`
	TxHash string `json:"tx_hash"`
	Minter User `json:"minter"`
}

type _RelevantMint RelevantMint

// NewRelevantMint instantiates a new RelevantMint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRelevantMint(contractAddress string, tokenId string, blockNumber int32, txHash string, minter User) *RelevantMint {
	this := RelevantMint{}
	this.ContractAddress = contractAddress
	this.TokenId = tokenId
	this.BlockNumber = blockNumber
	this.TxHash = txHash
	this.Minter = minter
	return &this
}

// NewRelevantMintWithDefaults instantiates a new RelevantMint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRelevantMintWithDefaults() *RelevantMint {
	this := RelevantMint{}
	return &this
}

// GetContractAddress returns the ContractAddress field value
func (o *RelevantMint) GetContractAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContractAddress
}

// GetContractAddressOk returns a tuple with the ContractAddress field value
// and a boolean to check if the value has been set.
func (o *RelevantMint) GetContractAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContractAddress, true
}

// SetContractAddress sets field value
func (o *RelevantMint) SetContractAddress(v string) {
	o.ContractAddress = v
}

// GetTokenId returns the TokenId field value
func (o *RelevantMint) GetTokenId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value
// and a boolean to check if the value has been set.
func (o *RelevantMint) GetTokenIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenId, true
}

// SetTokenId sets field value
func (o *RelevantMint) SetTokenId(v string) {
	o.TokenId = v
}

// GetBlockNumber returns the BlockNumber field value
func (o *RelevantMint) GetBlockNumber() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.BlockNumber
}

// GetBlockNumberOk returns a tuple with the BlockNumber field value
// and a boolean to check if the value has been set.
func (o *RelevantMint) GetBlockNumberOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BlockNumber, true
}

// SetBlockNumber sets field value
func (o *RelevantMint) SetBlockNumber(v int32) {
	o.BlockNumber = v
}

// GetTxHash returns the TxHash field value
func (o *RelevantMint) GetTxHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TxHash
}

// GetTxHashOk returns a tuple with the TxHash field value
// and a boolean to check if the value has been set.
func (o *RelevantMint) GetTxHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TxHash, true
}

// SetTxHash sets field value
func (o *RelevantMint) SetTxHash(v string) {
	o.TxHash = v
}

// GetMinter returns the Minter field value
func (o *RelevantMint) GetMinter() User {
	if o == nil {
		var ret User
		return ret
	}

	return o.Minter
}

// GetMinterOk returns a tuple with the Minter field value
// and a boolean to check if the value has been set.
func (o *RelevantMint) GetMinterOk() (*User, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Minter, true
}

// SetMinter sets field value
func (o *RelevantMint) SetMinter(v User) {
	o.Minter = v
}

func (o RelevantMint) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RelevantMint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["contract_address"] = o.ContractAddress
	toSerialize["token_id"] = o.TokenId
	toSerialize["block_number"] = o.BlockNumber
	toSerialize["tx_hash"] = o.TxHash
	toSerialize["minter"] = o.Minter
	return toSerialize, nil
}

func (o *RelevantMint) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"contract_address",
		"token_id",
		"block_number",
		"tx_hash",
		"minter",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRelevantMint := _RelevantMint{}

	err = json.Unmarshal(bytes, &varRelevantMint)

	if err != nil {
		return err
	}

	*o = RelevantMint(varRelevantMint)

	return err
}

type NullableRelevantMint struct {
	value *RelevantMint
	isSet bool
}

func (v NullableRelevantMint) Get() *RelevantMint {
	return v.value
}

func (v *NullableRelevantMint) Set(val *RelevantMint) {
	v.value = val
	v.isSet = true
}

func (v NullableRelevantMint) IsSet() bool {
	return v.isSet
}

func (v *NullableRelevantMint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRelevantMint(val *RelevantMint) *NullableRelevantMint {
	return &NullableRelevantMint{value: val, isSet: true}
}

func (v NullableRelevantMint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRelevantMint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


